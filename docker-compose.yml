version: '3'
services:
  minio:
    image: minio/minio
    container_name: s3-minio
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: 'minioadmin'
      MINIO_ROOT_PASSWORD: 'minioadmin'
    command: server  /data --console-address ":9001"
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '-f',
          'http://localhost:9000/minio/health/live'
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    networks:
      - dev-network
  db:
    image: postgres:16
    container_name: db-backend
    environment:
      POSTGRES_PASSWORD: 1
    volumes:
      - db:/var/lib/postgresql/data
    restart: always
    ports:
      - "5444:5432"
    networks:
      - dev-network
  message-broker:
    image: rabbitmq:3.12.9-management
    container_name: message-broker
    ports:
      - 5672:5672 # for sender and consumer connections
      - 15672:15672 # for serve RabbitMQ GUI
    volumes:
      - ./dev-rabbitmq/data/:/var/lib/rabbitmq
      - ./dev-rabbitmq/log/:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: 'user'
      RABBITMQ_DEFAULT_PASS: 'user'
    restart: always
    networks:
      - dev-network
  image-service:
    build:
      dockerfile: Dockerfile
      context: ./image-service/
    volumes:
      - ./image-service/:/opt/app/
    ports:
      - "3001:3000"
    restart: always
    networks:
      - dev-network
    depends_on:
      - db
      - minio
      - message-broker
  image-saver:
    build:
      dockerfile: Dockerfile
      context: ./image-saver/
    restart: always
    networks:
      - dev-network
    depends_on:
      - minio
      - message-broker

volumes:
  db:
  minio:


networks:
  # Create a new Docker network.
  dev-network:
    driver: bridge
